
<!doctype html>
<html lang="en" data-bs-theme="dark">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>캡스톤디자인 16조</title>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyALuNZjv26aWboIy9FpbHDZNmVkwSjFM8U&callback=initMap" async defer></script>
    <style>
      body, html {
        height: 400px;
        width: 100%;
      }
      .header{
            padding: 20px;
            text-align: center;
        }
      .container {
        height: 100%;
        display: flex;
        flex-direction: column;
      }
      #map {
        height: 100%;
        flex: 1;
      }
    </style>
  </head>

  <body>
    <!-- 내비게이션 바 시작 -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <div class="container-fluid">
          <a class="navbar-brand" href="#">잡았다 요놈</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
          </button>
          <!-- 메뉴 항목 -->
          <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
              <ul class="navbar-nav">
                  <li class="nav-item">
                      <a class="nav-link active" aria-current="page" href="/Index.html">홈</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="/views/map.ejs">지도조회</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="/views/map_setting.ejs">기능설정</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="#">문의하기</a>
                  </li>
              </ul>
          </div>
      </div>
  </nav>
    <div class="container">
      <div id="map"></div>
    </div>

    <script>
    let map, marker;
    let markers = []; // 마커를 저장할 배열
    let polyline; // 연결된 선을 저장할 변수
    let circle; // 그려질 원을 저장할 변수

    async function initMap() {
        const { Map } = await google.maps.importLibrary("maps");
        const { Marker } = await google.maps.importLibrary("marker");

        map = new Map(document.getElementById("map"), {
            zoom: 8,
            center: new google.maps.LatLng(37.8862, 127.7357),
            mapTypeId: google.maps.MapTypeId.ROADMAP  ,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
            },
            navigationControlOptions: {
                style: google.maps.NavigationControlStyle.SMALL
            },
            scaleControl: true,
            streetViewControl: false,
            controlSize: 28,
            minZoom: 3,
        });

        <% for(const coordinate of coords) { %>
            marker = new Marker({
                map: map,
                position: {lat: <%=coordinate.lat%>, lng: <%=coordinate.lon%>}
            });
            markers.push(marker); // 마커를 배열에 추가

            marker.addListener("click", () => {
                opts.find(opt => new google.maps.LatLng(opt.dataset.lat, opt.dataset.lon).equals(e.latLng)).selected = true;
            });
        <% } %>

        // 마커를 연결한 선 생성
        polyline = new google.maps.Polyline({
            path: markers.map(marker => marker.getPosition()),
            geodesic: true, // 대원 면적을 고려한 선
            strokeColor: "#FF0000", // 선의 색상
            strokeOpacity: 1.0, // 선의 투명도
            strokeWeight: 3 // 선의 두께
        });
        // 원 그리기 함수
    function drawCircle() {
        clearMarkers(); // 기존 마커 삭제
        const centerPoint = markers[0].getPosition(); // 예시로 첫 번째 마커를 중심점으로 사용
        circle = new google.maps.Circle({
            center: centerPoint,
            radius: 100, // 반경 100미터
            fillColor: "#FF0000", // 원의 채우기 색상
            fillOpacity: 0.4, // 원의 투명도
            strokeColor: "#FF0000", // 원의 테두리 색상
            strokeOpacity: 0.8, // 테두리의 투명도
            strokeWeight: 2 // 테두리의 두께
        });

        // 원을 지도에 추가
        circle.setMap(map);
    }

        // 선을 지도에 추가
        polyline.setMap(map);
        // 커스텀 UI 버튼 생성 및 이벤트 핸들러 등록
    const drawCircleButton = document.createElement("button");
    drawCircleButton.textContent = "구역 설정";
    drawCircleButton.classList.add("custom-map-button");

    drawCircleButton.addEventListener("click", drawCircle);

    // 버튼을 맵의 오른쪽 상단에 추가
    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(drawCircleButton);
    }

    initMap();
    </script>
  </body>
</html>
